/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mlh.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mlh.services.VideoGenGrammarAccess;
import org.xtext.mlh.videoGen.Alternatives;
import org.xtext.mlh.videoGen.Description;
import org.xtext.mlh.videoGen.Display_stats;
import org.xtext.mlh.videoGen.Duration;
import org.xtext.mlh.videoGen.Mandatory;
import org.xtext.mlh.videoGen.Optional;
import org.xtext.mlh.videoGen.VideoGen;
import org.xtext.mlh.videoGen.VideoGenPackage;
import org.xtext.mlh.videoGen.VideoSeq;

@SuppressWarnings("all")
public class VideoGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VideoGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VideoGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VideoGenPackage.ALTERNATIVES:
				sequence_Alternatives(context, (Alternatives) semanticObject); 
				return; 
			case VideoGenPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case VideoGenPackage.DISPLAY_STATS:
				sequence_Display_stats(context, (Display_stats) semanticObject); 
				return; 
			case VideoGenPackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case VideoGenPackage.MANDATORY:
				sequence_Mandatory(context, (Mandatory) semanticObject); 
				return; 
			case VideoGenPackage.OPTIONAL:
				sequence_Optional(context, (Optional) semanticObject); 
				return; 
			case VideoGenPackage.VIDEO_GEN:
				sequence_VideoGen(context, (VideoGen) semanticObject); 
				return; 
			case VideoGenPackage.VIDEO_SEQ:
				sequence_VideoSeq(context, (VideoSeq) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     VideoType returns Alternatives
	 *     Alternatives returns Alternatives
	 *
	 * Constraint:
	 *     (id=ID videoseqs+=VideoSeq+)
	 */
	protected void sequence_Alternatives(ISerializationContext context, Alternatives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     description=STRING?
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Display_stats returns Display_stats
	 *
	 * Constraint:
	 *     display_stats=INT?
	 */
	protected void sequence_Display_stats(ISerializationContext context, Display_stats semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     duration=INT?
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoType returns Mandatory
	 *     Mandatory returns Mandatory
	 *
	 * Constraint:
	 *     videoseq=VideoSeq
	 */
	protected void sequence_Mandatory(ISerializationContext context, Mandatory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VideoGenPackage.Literals.MANDATORY__VIDEOSEQ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoGenPackage.Literals.MANDATORY__VIDEOSEQ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMandatoryAccess().getVideoseqVideoSeqParserRuleCall_1_0(), semanticObject.getVideoseq());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VideoType returns Optional
	 *     Optional returns Optional
	 *
	 * Constraint:
	 *     videoseq=VideoSeq
	 */
	protected void sequence_Optional(ISerializationContext context, Optional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VideoGenPackage.Literals.OPTIONAL__VIDEOSEQ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VideoGenPackage.Literals.OPTIONAL__VIDEOSEQ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOptionalAccess().getVideoseqVideoSeqParserRuleCall_1_0(), semanticObject.getVideoseq());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VideoGen returns VideoGen
	 *
	 * Constraint:
	 *     videos+=VideoType*
	 */
	protected void sequence_VideoGen(ISerializationContext context, VideoGen semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VideoSeq returns VideoSeq
	 *
	 * Constraint:
	 *     (vid=ID? url=STRING description=Description? duration=Duration? display_stats=Display_stats?)
	 */
	protected void sequence_VideoSeq(ISerializationContext context, VideoSeq semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
